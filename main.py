"""
The following module receives user's coordinates, a year and returns a map
with points of the locations of filming on that year that are the nearest to
the user's location.

To do that, the module uses data.csv file that is generated by gen_csv module.
"""

import pandas as pd
import folium as fl
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderUnavailable
import haversine


def gen_address(coodrdinates: tuple):
    '''
    The function generates an address by the entered by user coordinates.
    '''
    address = ''

    for elem in coodrdinates:
        address += str(elem) + ', '

    geolocator = Nominatim(user_agent="tito")
    location = geolocator.reverse(address[:-2], language='en')

    location = str(location).split(', ')
    return location[-1]


def gen_location(location: str):
    '''
    The function returns latitude and longitude of the entered location.
    '''
    data = ''
    check = False
    counter = 0
    try:
        while check != True:
            if counter == 6:
                return ''

            geolocator = Nominatim(user_agent='tito').geocode(location)

            try:
                data = (geolocator.latitude, geolocator.longitude)
                check = True

            except AttributeError:

                location = location.split(', ')[1:]
                new_location = ''

                for elem in location:
                    new_location += elem + ', '

                location = new_location
                counter += 1

    except GeocoderUnavailable:
        return data
    return data


def gen_distance(coord1: tuple, coord2: tuple):
    '''
    The function returns the great-circle distance between two points on a sphere.
    >>> gen_distance((45.7597, 4.8422), (48.8567, 2.3508))
    392.2172595594006
    '''
    distance = haversine.haversine(coord1, coord2)

    return distance


def calculate_distances(year: int, point: tuple):
    '''
    The function filters a DataFrame by the year entered by user,
    calculates the distances from the entered by the user point to all the
    coordinates and returns the nearest spots.
    '''

    data = pd.read_csv("data.csv")
    address = gen_address(point)  # used to narrow down the number of options

    data = data[data['Location'].str.contains(address) == True]
    data = data[data['Year'] == year]

    data.to_csv('beta.csv', index=False)

    print('\nSearching the nearest points...')

    data['Coordinates'] = data['Location'].apply(gen_location)
    data = data[data['Coordinates'] != '']

    data.to_csv('beta.csv', index=False)

    data['Lat'] = data['Coordinates'].apply(lambda x: x[0])
    data['Lon'] = data['Coordinates'].apply(lambda x: x[1])

    data['Distance'] = data['Coordinates'].apply(
        lambda x: gen_distance(point, x))

    data = data.sort_values(by=['Distance'])

    print('\nGenerating the map...')

    data = data.head(10)
    data.to_csv('beta.csv', index=False)

    return data[['Title', 'Year', 'Location', 'Lat', 'Lon', 'Distance']]


def create_map(data, address: tuple):
    '''
    The following function generates a map with the filming points based
    on a DataFrame.
    '''
    lat = data['Lat'].tolist()
    lon = data['Lon'].tolist()
    title = data['Title'].tolist()
    point_address = data['Location'].tolist()
    year = data['Year'].tolist()
    dist = data['Distance'].tolist()
    length = data.shape[0]

    location = [address[0], address[1]]

    film_map = fl.Map(location=location,
                      zoom_start=5)

    film_points = fl.FeatureGroup(name='Film map')

    html = """
        <strong>
        <h3><b>{}</b></h3>
        <p><b>Year: </b>{}<br><b>Address: </b>{}</p>
        <p><b>Distance: </b>{} km</p>
        </strong>
        """

    for _ in range(length):

        coordinates = [location, [float(lat[_]), float(lon[_])]]

        film_points.add_child(fl.Marker(location=[lat[_], lon[_]],
                                        popup=html.format(
            title[_], year[_], point_address[_], round(dist[_], 2)),
            icon=fl.Icon()))

        connector = fl.PolyLine(locations=coordinates, weight=3)
        film_map.add_child(connector)

    fl.Marker(
        location=location,
        popup="<b>You are here!</b>",
        icon=fl.Icon(icon="home", color="red"),
    ).add_to(film_map)

    film_map.add_child(film_points)
    film_map.save('FilmsAroundYou.html')

    text = '\nOpen your browser to view the generated map!'

    return text


def main():
    '''
    The function executes aa process of creating a map based on the info,
    entered by user.
    '''
    example = '2002 -37.9064862 144.7533059'
    user_info = input(
        '\nPlease, enter the year and your coordinates (latitude & longitude) \
like this:\n{}\nEXAMPLE: {}\n{}\n'
        .format('='*37, example, '='*37))

    user_year, lat, lon = user_info.split(' ')
    user_coord = (float(lat), float(lon))
    user_year = int(user_year)

    ten_points = calculate_distances(user_year, user_coord)

    if ten_points.shape[0] == 0:
        print('\n\n\nOops, looks like there are no near films points in that year!')
        print('\nTry again with another coordinates/year or regenerate the file!')
        main()

    result = create_map(ten_points, user_coord)
    print(result)

    return result


if __name__ == "__main__":

    main()
